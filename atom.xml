<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://liboran.github.io</id>
    <title>12218</title>
    <updated>2020-04-07T16:33:56.983Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://liboran.github.io"/>
    <link rel="self" href="https://liboran.github.io/atom.xml"/>
    <subtitle>十里八乡有名的bug写手</subtitle>
    <logo>https://liboran.github.io/images/avatar.png</logo>
    <icon>https://liboran.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 12218</rights>
    <entry>
        <title type="html"><![CDATA[使用PSCP传输文件]]></title>
        <id>https://liboran.github.io/post/pscp/</id>
        <link href="https://liboran.github.io/post/pscp/">
        </link>
        <updated>2020-04-07T15:42:43.000Z</updated>
        <summary type="html"><![CDATA[<p>说说Windows和Linux之间的文件传输</p>
]]></summary>
        <content type="html"><![CDATA[<p>说说Windows和Linux之间的文件传输</p>
<!-- more -->
<p>本来是想在手机上的Linux系统里面安装FTP，使用FTP传输文件什么的。</p>
<p>但是。。。没成功。。。安装好之后一直无法访问。。。<br>
<img src="https://liboran.github.io/post-images/1586276717640.png" alt="" loading="lazy"><br>
所以FTP这个方法以后找时间再说说。。。</p>
<h1 id="pscp">PSCP</h1>
<p>用过putty的人应该都知道pscp这个东西，基于SSH，可以传输从单个文件到多个文件夹。<br>
<img src="https://liboran.github.io/post-images/1586274669032.png" alt="" loading="lazy"><br>
这个可执行文件并不能直接打开，而是需要使用<strong>命令提示符</strong>才可以。</p>
<h1 id="使用步骤">使用步骤</h1>
<h2 id="windows上传到linux">Windows上传到Linux</h2>
<p>1.切换到pscp.exe文件所在目录下，如果现在在命令提示符中输入“pscp.exe”就能看到pscp被启动了。<br>
会有很多pscp命令会出现。<br>
<img src="https://liboran.github.io/post-images/1586275273791.png" alt="" loading="lazy"><br>
2.传输单个文件时，需要输入这样的命令“<strong>pscp.exe 文件路径/文件名 主机名@ip:文件路径/文件名</strong>”。</p>
<p><strong>IP地址之后一定要记得加“:”！！！</strong></p>
<p>例如：把与pscp同文件夹的“chaoxing.py”文件传输到Linux系统<br>
<img src="https://liboran.github.io/post-images/1586275624436.png" alt="" loading="lazy"><br>
<img src="https://liboran.github.io/post-images/1586275822098.png" alt="" loading="lazy"><br>
当输完命令回车之后，会提示需要输入Linux的用户的密码，输完之后，文件就会开始传输到Linux。<br>
<img src="https://liboran.github.io/post-images/1586275995847.png" alt="" loading="lazy"></p>
<h2 id="windows从linux获取">Windows从Linux获取</h2>
<p>命令与前者相似，就是把传文件和获取文件的双方位置对调。<br>
<img src="https://liboran.github.io/post-images/1586276386295.png" alt="" loading="lazy"></p>
<h2 id="传输文件夹">传输文件夹</h2>
<p>只要在命令中添加“-r”，传输的文件夹就会递归传输，就和Linux命令里面的删除文件夹“rm -r”道理一样。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jupyter Notebook开启远程连接]]></title>
        <id>https://liboran.github.io/post/remote-jupyter/</id>
        <link href="https://liboran.github.io/post/remote-jupyter/">
        </link>
        <updated>2020-04-05T03:11:26.000Z</updated>
        <summary type="html"><![CDATA[<p>在昨天刚刚部署的Linux上面安装Jupyter Notebook，<br>
敲代码更方便！</p>
]]></summary>
        <content type="html"><![CDATA[<p>在昨天刚刚部署的Linux上面安装Jupyter Notebook，<br>
敲代码更方便！</p>
<!-- more -->
<h1 id="前言">前言</h1>
<p>刚刚接触Linux，用Vim这种编辑器实在用不习惯啊。。。<br>
只好安装了一个Jupyter Notebook，开启远程连接，敲代码也挺香😎。</p>
<h1 id="准备工作">准备工作</h1>
<p>使用命令行安装Jupyter Notebook，直接输入“pip3 install jupyter”，之后耐心等待就行了（前提是安装了pip！！！）。</p>
<p>如果安装完之后，输入“jupyter notebook”，可以正常启动，就算是安装成功了。</p>
<h1 id="开始配置远程连接">开始配置远程连接</h1>
<p>1.在终端输入“<strong>jupyter notebook --generate-config --allow-root</strong>”，就能生成Jupyter Notebook的配置文件。这个配置文件在“~/.jupyter/”文件夹内。<br>
<img src="https://liboran.github.io/post-images/1586057330980.png" alt="" loading="lazy"><br>
2.在终端输入“ipython”，打开ipython。</p>
<p>在打开的ipython中输入“<strong>from notebook.auth import passwd</strong>”，之后再输入“<strong>passwd()</strong>”，之后会提示要输入密码，这个密码是远程连接时的登陆密码。<br>
<img src="https://liboran.github.io/post-images/1586057600578.png" alt="" loading="lazy"><br>
将生成的“sha1:……”这串文字复制保存下来，这是密码的hash值。</p>
<p>3.使用cd命令切换到“~/.jupyter/”文件夹内，输入“<strong>vim jupyter_notebook_config.py</strong>”,开始配置远程连接。<br>
<img src="https://liboran.github.io/post-images/1586057882118.png" alt="" loading="lazy"><br>
对配置文件里面的以下值做出修改：</p>
<p>（1）允许用户root运行：<br>
c.NotebookApp.allow_root =True<br>
<img src="https://liboran.github.io/post-images/1586058402773.png" alt="" loading="lazy"><br>
（2）修改服务监听地址：<br>
c.NotebookApp.ip = '*'<br>
<img src="https://liboran.github.io/post-images/1586058411599.png" alt="" loading="lazy"><br>
（3）是否打开浏览器：<br>
c.NotebookApp.open_browser = False</p>
<p>（4）hash值（将生成的“sha1:……”填入）：<br>
c.NotebookApp.password = 'sha1:……'</p>
<p>（5）服务监听的端口：<br>
c.NotebookApp.port = 8888<br>
<img src="https://liboran.github.io/post-images/1586058548376.png" alt="" loading="lazy"><br>
注意要去掉前面的“#”。</p>
<p>这就行啦！</p>
<h1 id="使用过程">使用过程</h1>
<p>在终端输入“jupyter notebook”，启动Jupyter Notebook。</p>
<p>在浏览器输入“ip地址:端口号”,例如：192.168.0.10:8888。</p>
<p>第一次连接，需要输入密码，就是刚才自己设置的那个。</p>
<p>之后就能打开Jupyter Notebook啦！<br>
<img src="https://liboran.github.io/post-images/1586058826997.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Linux Deploy在手机安装Ubuntu]]></title>
        <id>https://liboran.github.io/post/linux-deploy/</id>
        <link href="https://liboran.github.io/post/linux-deploy/">
        </link>
        <updated>2020-04-04T15:55:59.000Z</updated>
        <summary type="html"><![CDATA[<p>记录一下Linux Deploy的使用方法</p>
]]></summary>
        <content type="html"><![CDATA[<p>记录一下Linux Deploy的使用方法</p>
<!-- more -->
<h1 id="前言">前言</h1>
<p>其实很早之前就搞过Linux Deploy，当时弄了很久才弄成功。但是当时并没有记笔记的习惯，今天才发现<strong>竟然忘了怎么做了</strong>...<br>
今天只好“重操旧业”，竟然弄了一下午，安装了五六回才搞成。<br>
<img src="https://liboran.github.io/post-images/1586016463867.gif" alt="" loading="lazy"><br>
这回一定要记录下来，以免以后重复掉坑。</p>
<h1 id="准备">准备</h1>
<p>需要的软件和工具有旧手机一部、<a href='https://github.com/meefik/linuxdeploy/releases'>Linux Deploy</a>(最好版本对应)、BusyBox Free、KingRoot(这个随意，只要能够root手机就可以)。<br>
<img src="https://liboran.github.io/post-images/1586017179881.jpeg" alt="" loading="lazy"></p>
<h1 id="安装过程">安装过程</h1>
<h2 id="1root手机">1.root手机</h2>
<p>我是使用KingRoot这款APP将手机root的，root手机的方式很多，<a href='https://baidu.com'>百度一下，你就知道</a>。这是我把手机root好之后的图片，我是使用的华为荣耀6Plus。<br>
<img src="https://liboran.github.io/post-images/1586017532433.jpeg" alt="" loading="lazy"></p>
<h2 id="2安装busybox">2.安装BusyBox</h2>
<p>BusyBox这个APP的作用是扩展Linux命令，安装的时候只需要把安装目录改成“/system/xbin”即可，然后点击“Install”就行啦。<br>
<img src="https://liboran.github.io/post-images/1586017729360.jpeg" alt="" loading="lazy"></p>
<h2 id="3使用linux-deploy部署linux系统"><strong>3.使用Linux Deploy部署Linux系统</strong></h2>
<p>（1）打开Linux Deploy，先点击左上角的三道杠，点击“<strong>设置</strong>”。</p>
<p>（2）勾选上“<strong>CPU唤醒</strong>”，这样在熄屏时也能保持运行状态（如下图）。<br>
<img src="https://liboran.github.io/post-images/1586018044271.jpeg" alt="" loading="lazy"><br>
将“<strong>PATH变量</strong>”更改为“<strong>/system/xbin</strong>”，同BusyBox的安装目录。<br>
并且勾选上“<strong>启用CLI</strong>”（如下图）。<br>
<img src="https://liboran.github.io/post-images/1586018342163.jpeg" alt="" loading="lazy"><br>
（3）返回主界面，点击右下角难以名状的一个图标，开始修改Linux的属性。</p>
<p><strong>发行版GUN/Linux</strong>默认为Debian，在这里我改成了<strong>Ubuntu</strong>。</p>
<p>架构保持默认即可。</p>
<p><strong>发行版GUN/Linux版本</strong>改为<strong>bionic</strong>。</p>
<p>源地址一定要记得更改！！！否则会下载得慢的离谱...<br>
我把源地址改成了清华大学镜像网站的源，速度会很快（源地址：http://tuna.tsinghua.edu.cn/ubuntu-ports）。</p>
<p><strong>安装路径</strong>改为“/mnt/sdcard/linux/linux.img”，否则可能会出错。</p>
<p>如下图：<br>
<img src="https://liboran.github.io/post-images/1586018854829.jpeg" alt="" loading="lazy"></p>
<p>我这里把<strong>镜像大小</strong>改成了3072，这个值请根据自己手机情况自行判断。</p>
<p><strong>文件系统</strong>改成“<strong>ext4</strong>”。</p>
<p><strong>用户名</strong>以及<strong>用户密码</strong>自行定义即可，之后登陆会用到。</p>
<p><strong>本地化</strong>是选择语言，我这里改用“<strong>zh_CN.UTF-8</strong>”。</p>
<p>如下图：<br>
<img src="https://liboran.github.io/post-images/1586021552095.png" alt="" loading="lazy"></p>
<p>将挂载下的<strong>启用</strong>勾选上，并且在<strong>挂载点列表</strong>中添加挂载点“<strong>/system/</strong>”。这是让Linux系统和手机共享目录。</p>
<p>一定要勾选上<strong>SSH</strong>下的<strong>启用</strong>！！！否则无法使用SSH对Ubuntu进行连接。</p>
<p>如下图：<br>
<img src="https://liboran.github.io/post-images/1586019676938.jpeg" alt="" loading="lazy"></p>
<p>最后如果想安装图形界面，可以勾选上，然后使用“VNC Viewer”之类的软件连接。</p>
<p>（4）属性设置好之后回到主界面，点击右上角的三个点，点击“安装”，Linux Deploy就会开始安装Ubuntu系统啦，用的时间会很长，需要耐心等待。当出现“<strong>&lt;&lt;&lt;deploy</strong>”时，说明安装完成了。</p>
<p><code>如果在安装过程中Linux Deploy卡在了某一环节，可以点击屏幕下方的“停止”，当出现“&lt;&lt;&lt;stop”之后，再次点击“安装”就行了。</code></p>
<p>如果安装完成之后，点击“启动”，出现了“Starting extra/ssh ... done”说明安装成功了。</p>
<h1 id="使用">使用</h1>
<p>安装成功之后可以使用SSH连接软件与手机上的Linux连接控制。</p>
<figure data-type="image" tabindex="1"><img src="https://liboran.github.io/post-images/1586020563399.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[超星学习通程序新功能]]></title>
        <id>https://liboran.github.io/post/Chaoxing_new_1/</id>
        <link href="https://liboran.github.io/post/Chaoxing_new_1/">
        </link>
        <updated>2020-04-03T12:41:57.000Z</updated>
        <summary type="html"><![CDATA[<p>新增了测试搜题模式</p>
]]></summary>
        <content type="html"><![CDATA[<p>新增了测试搜题模式</p>
<!-- more -->
<p>今天在做超星学习通测试时，有了新发现😏。<br>
<img src="https://liboran.github.io/post-images/1585919996157.png" alt="" loading="lazy"><br>
<img src="https://liboran.github.io/post-images/1585920024353.png" alt="" loading="lazy"><br>
当查看网页源代码时，发现里面有一个script标签里面有一大堆Unicode编码的字符串。<br>
<img src="https://liboran.github.io/post-images/1585920048755.png" alt="" loading="lazy"><br>
从网上随便找一个Unicode编码解码的网站将这一部分解码之后，就能得到里面含有题目和选项的网页源代码。<br>
<img src="https://liboran.github.io/post-images/1585920058954.png" alt="" loading="lazy"><br>
仔细观察这一些代码，发现<strong>有一部分</strong>选项里面会有一个“特殊名称”的值“<strong>isanswer</strong>”。<br>
<img src="https://liboran.github.io/post-images/1585920070570.png" alt="" loading="lazy"><br>
这个值名称为“isanswer”，值为“true”，很容易让人联想到这会是题目的正确答案😦😦😦。<br>
后来经过多次做测试、核对答案，可以确定这竟然真的是正确答案。<br>
所以下一步就把答案部分提取出来就行了。<br>
使用python的正则表达式就能够很轻易将答案部分匹配出来，就搞定了😎。</p>
<p>我将新的功能加到了“超星学习通搜题程序”里面，<a href="https://liboran.github.io/post/Chaoxing/">详细内容请看这里</a>。</p>
<p>下面是程序展示😎。<br>
<img src="https://liboran.github.io/post-images/1585920684087.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[KG音乐(非VIP)下载]]></title>
        <id>https://liboran.github.io/post/KG_Music/</id>
        <link href="https://liboran.github.io/post/KG_Music/">
        </link>
        <updated>2020-04-02T12:33:03.000Z</updated>
        <summary type="html"><![CDATA[<p>写了个小爬虫练一练</p>
]]></summary>
        <content type="html"><![CDATA[<p>写了个小爬虫练一练</p>
<!-- more -->
<h1 id="制作过程">制作过程</h1>
<h2 id="接口分析">接口分析</h2>
<p>在酷狗首页进行抓包分析，当输入需要搜索的歌曲名称搜索时，可找出下图链接，其中包含着搜索到的歌曲的第一页歌曲信息。<br>
<img src="https://liboran.github.io/post-images/1585832390683.png" alt="" loading="lazy"><br>
在歌曲播放界面可以找出这个json文件里面有歌曲下载链接，hash值可在上一个链接请求中找到。<br>
<img src="https://liboran.github.io/post-images/1585832400508.png" alt="" loading="lazy"></p>
<h1 id="使用方法">使用方法</h1>
<p>如下图所示：<br>
<img src="https://liboran.github.io/post-images/1585832411518.png" alt="" loading="lazy"><br>
下载好的歌曲可在“Download”文件夹中找到。<br>
<img src="https://liboran.github.io/post-images/1585832421079.png" alt="" loading="lazy"><br>
<a href="https://github.com/12218/programs/tree/master/KG_Music">本程序的GitHub地址在此处。</a><br>
本文章中所有程序仅用于学习交流，禁止用于其他用途。如有侵权，请联系本人将侵权内容删除。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[超星学习通搜题程序]]></title>
        <id>https://liboran.github.io/post/Chaoxing/</id>
        <link href="https://liboran.github.io/post/Chaoxing/">
        </link>
        <updated>2020-04-01T08:01:19.000Z</updated>
        <summary type="html"><![CDATA[<p>记录一下超星学习通搜题程序的编写过程。</p>
]]></summary>
        <content type="html"><![CDATA[<p>记录一下超星学习通搜题程序的编写过程。</p>
<!-- more -->
<p>现在网络上有很多超星学习通搜题APP，还有搜题公众号。但是其中大部分都会收费，免费的搜题可能会要求关注各种公众号。并且当学习通任务点很多的时候，每次只查询一道题目确实很不方便。故此尝试制作了以下超星学习通搜题程序。<br>
我首先选择了一个没有搜题数量限制的搜题APP，将APP安装到“夜神模拟器”，通过Fiddler对其进行抓包。很容易就能发现以下的链接就是APP搜题接口。<br>
<img src="https://liboran.github.io/post-images/1585729244483.png" alt="" loading="lazy"><br>
分析这个接口，发现若想访问这个接口，需要一个token值。有了此值就可以访问这个接口。经过几次申请，可以发现这个token是不会发生变化的，所以可以直接引用。<br>
<img src="https://liboran.github.io/post-images/1585729562221.png" alt="" loading="lazy"></p>
<!-- more -->
<p>接下来就要从网页中提取题目，将题目一个一个通过接口申请，就能够得到答案。<br>
由于害怕学习通检测模拟登陆封号，所以使用匹配网页框架源代码的方式获取任务点里面的题目。<br>
<img src="https://liboran.github.io/post-images/1585729914763.png" alt="" loading="lazy"><br>
将网页框架源代码使用Beautifulsoup匹配，即可获得这个任务点里面的所有题目。<br>
<img src="https://liboran.github.io/post-images/1585730186313.png" alt="" loading="lazy"><br>
将以上过程整合，就可得到超星学习通搜题程序。<br>
详细代码请看<a href='https://github.com/12218/Chaoxing'>GitHub</a>。</p>
]]></content>
    </entry>
</feed>