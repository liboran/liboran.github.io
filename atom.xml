<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://liboran.github.io</id>
    <title>12218</title>
    <updated>2020-04-19T03:45:23.659Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://liboran.github.io"/>
    <link rel="self" href="https://liboran.github.io/atom.xml"/>
    <subtitle>十里八乡有名的bug写手</subtitle>
    <logo>https://liboran.github.io/images/avatar.png</logo>
    <icon>https://liboran.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 12218</rights>
    <entry>
        <title type="html"><![CDATA[树莓派（一）安装系统]]></title>
        <id>https://liboran.github.io/post/pi/</id>
        <link href="https://liboran.github.io/post/pi/">
        </link>
        <updated>2020-04-18T15:55:44.000Z</updated>
        <summary type="html"><![CDATA[<p>记录一下，入坑开始</p>
]]></summary>
        <content type="html"><![CDATA[<p>记录一下，入坑开始</p>
<!-- more -->
<h1 id="前言">前言</h1>
<p>终于狠下心来买了一块树莓派开发板。昨天先是给树莓派安装了系统，入坑开始。<br>
<img src="https://liboran.github.io/post-images/1587225604095.png" alt="" loading="lazy"></p>
<h1 id="系统安装过程">系统安装过程</h1>
<p>1.树莓派的系统安装过程出奇的简单。。。打开<a href='https://www.balena.io/etcher/'>balenaEtcher</a>之后选择镜像、安装位置就行了。<br>
<img src="https://liboran.github.io/post-images/1587225875726.png" alt="" loading="lazy"><br>
安装完之后有一个校验的过程。总共大概十分钟就能够安装好。</p>
<p>2.安装完成之后需要添加配置文件，以便之后可以顺利连接WIFI和SSH。将下图文件放入树莓派安装完成之后的盘里即可。<br>
<img src="https://liboran.github.io/post-images/1587226319707.png" alt="" loading="lazy"><br>
其中wpa_supplicant.conf文件是用来配置WIFI的，只要将WIFI名称和密码填入即可。</p>
<p>3.在电脑浏览器输入<mark>192.168.0.1</mark>，可以进入路由器管理界面，查看连接的设备里面名为raspberrypi的设备，记录下来内网的IP地址。<br>
<img src="https://liboran.github.io/post-images/1587226669976.jpg" alt="" loading="lazy"></p>
<p>4.打开Putty，输入刚才记下的IP地址，端口为22，即可进入SSH连接。初始用户名为pi，密码为raspberry。<br>
<img src="https://liboran.github.io/post-images/1587226800342.png" alt="" loading="lazy"></p>
<p>5.无图形化界面连接已经完成了，现在要打开VNC。<br>
在终端输入<mark>sudo raspi-config</mark>，会出现树莓派的基本设置。<br>
<img src="https://liboran.github.io/post-images/1587226941246.png" alt="" loading="lazy"><br>
<img src="https://liboran.github.io/post-images/1587226948093.png" alt="" loading="lazy"><br>
进入第五项，<mark>Interfacing Options</mark>，选择VNC，开启即可。<br>
<img src="https://liboran.github.io/post-images/1587227030784.png" alt="" loading="lazy"><br>
<img src="https://liboran.github.io/post-images/1587227036712.png" alt="" loading="lazy"></p>
<p>6.使用VNC Viewer对树莓派进行连接，虽然连接成功，但是只出现了黑框。。。<br>
<img src="https://liboran.github.io/post-images/1587227140004.png" alt="" loading="lazy"><br>
这是没有设置分辨率的原因。<br>
继续在raspi-config里面，进入<mark>Advanced Options</mark>。<br>
<img src="https://liboran.github.io/post-images/1587227164106.png" alt="" loading="lazy"><br>
选择A5 Resolution即可对分辨率进行调节。<br>
<img src="https://liboran.github.io/post-images/1587227289664.png" alt="" loading="lazy"><br>
<img src="https://liboran.github.io/post-images/1587227297432.png" alt="" loading="lazy"></p>
<p>7.设置好分辨率之后，就能在VNC中顺利打开图形化界面了！<br>
<img src="https://liboran.github.io/post-images/1587227344806.png" alt="" loading="lazy"></p>
<h1 id="last-but-not-least">Last But Not Least</h1>
<p>1.在设置语言的时候应当勾选上“Use US keyboard”。<br>
<img src="https://liboran.github.io/post-images/1587227442758.png" alt="" loading="lazy"><br>
2.如果文件管理器打开时闪退（据说很多树莓派都有这个问题。。。），在命令行输入<mark>sudo apt full-upgrade</mark>，等待更新安装完成之后，重启树莓派，就不会闪退了！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pandas基础使用]]></title>
        <id>https://liboran.github.io/post/pandas/</id>
        <link href="https://liboran.github.io/post/pandas/">
        </link>
        <updated>2020-04-16T15:20:30.000Z</updated>
        <summary type="html"><![CDATA[<p>数据分析神器之二</p>
]]></summary>
        <content type="html"><![CDATA[<p>数据分析神器之二</p>
<!-- more -->
<h1 id="pandas">Pandas</h1>
<pre><code class="language-python">import pandas
import numpy
</code></pre>
<h2 id="1-series对象">1 series对象</h2>
<pre><code class="language-python">a=numpy.array([1,3,5,7,9])
num=pandas.Series(a,index=['one','three','five','seven','nine'])
print(num)#一维数组使用Series创建
</code></pre>
<pre><code>one      1
three    3
five     5
seven    7
nine     9
dtype: int32
</code></pre>
<pre><code class="language-python">b=pandas.Series(a)
print(b)
</code></pre>
<pre><code>0    1
1    3
2    5
3    7
4    9
dtype: int32
</code></pre>
<pre><code class="language-python">c=pandas.Series(data=[100,200,300])
print(c)
</code></pre>
<pre><code>0    100
1    200
2    300
dtype: int64
</code></pre>
<pre><code class="language-python">d=pandas.Series([10,20,30,40],index=[1,2,3,4])
print(d)
</code></pre>
<pre><code>1    10
2    20
3    30
4    40
dtype: int64
</code></pre>
<pre><code class="language-python">e=pandas.Series({'one':1,'three':3,'five':5})
print(e)
</code></pre>
<pre><code>one      1
three    3
five     5
dtype: int64
</code></pre>
<pre><code class="language-python">print(e.index)
print(e.values)
print(e.index[1])
print(e.values[1])
</code></pre>
<pre><code>Index(['one', 'three', 'five'], dtype='object')
[1 3 5]
three
3
</code></pre>
<pre><code class="language-python">e.name='Numbers'#series命名，对标签索引的描述
print(e)
</code></pre>
<pre><code>one      1
three    3
five     5
Name: Numbers, dtype: int64
</code></pre>
<pre><code class="language-python">e.index.name='English'#标签索引也有name属性
#e.values.name='Number' 错误，values无此属性
print(e)
</code></pre>
<pre><code>English
one      1
three    3
five     5
Name: Numbers, dtype: int64
</code></pre>
<h2 id="2-dataframe对象">2 DataFrame对象</h2>
<pre><code class="language-python">f=pandas.DataFrame([['one',1],['two',2],['three',3],['four',4]])
f#二维数组的创建使用DataFrame
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>one</td>
      <td>1</td>
    </tr>
    <tr>
      <td>1</td>
      <td>two</td>
      <td>2</td>
    </tr>
    <tr>
      <td>2</td>
      <td>three</td>
      <td>3</td>
    </tr>
    <tr>
      <td>3</td>
      <td>four</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>
<pre><code class="language-python">f.index=['First','Second','Third','Fourth']#行索引
f.columns=['English','Number']#列索引
f
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>English</th>
      <th>Number</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>First</td>
      <td>one</td>
      <td>1</td>
    </tr>
    <tr>
      <td>Second</td>
      <td>two</td>
      <td>2</td>
    </tr>
    <tr>
      <td>Third</td>
      <td>three</td>
      <td>3</td>
    </tr>
    <tr>
      <td>Fourth</td>
      <td>four</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>
<pre><code class="language-python">f.index.name='Position'
f.columns.name='Items'#行列索引都有name属性
f
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>Items</th>
      <th>English</th>
      <th>Number</th>
    </tr>
    <tr>
      <th>Position</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>First</td>
      <td>one</td>
      <td>1</td>
    </tr>
    <tr>
      <td>Second</td>
      <td>two</td>
      <td>2</td>
    </tr>
    <tr>
      <td>Third</td>
      <td>three</td>
      <td>3</td>
    </tr>
    <tr>
      <td>Fourth</td>
      <td>four</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>
<pre><code class="language-python">dic={'English':['one','two','three','four'],'Number':[1,2,3,4]}
g=pandas.DataFrame.from_dict(dic)#字典转化为二维数组
g
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>English</th>
      <th>Number</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>one</td>
      <td>1</td>
    </tr>
    <tr>
      <td>1</td>
      <td>two</td>
      <td>2</td>
    </tr>
    <tr>
      <td>2</td>
      <td>three</td>
      <td>3</td>
    </tr>
    <tr>
      <td>3</td>
      <td>four</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>
<pre><code class="language-python">h=pandas.DataFrame.from_dict(dic,orient='index')#行列转换
h#orient另一值为columns，列索引水平位置
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>English</td>
      <td>one</td>
      <td>two</td>
      <td>three</td>
      <td>four</td>
    </tr>
    <tr>
      <td>Number</td>
      <td>1</td>
      <td>2</td>
      <td>3</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>
<h2 id="3-索引对象">3 索引对象</h2>
<pre><code class="language-python">i=pandas.Series(numpy.random.randn(5))
print(i)
i.index
</code></pre>
<pre><code>0   -0.262210
1   -0.817074
2   -1.302270
3    0.030391
4   -0.091137
dtype: float64





RangeIndex(start=0, stop=5, step=1)
</code></pre>
<pre><code class="language-python">i.index[i.index&gt;2]#神奇的用法
</code></pre>
<pre><code>Int64Index([3, 4], dtype='int64')
</code></pre>
<p>索引可进行下表查询、切片、概括</p>
<pre><code class="language-python">#MultiIndex
</code></pre>
<h2 id="4-数据索引和切片">4 数据索引和切片</h2>
<h3 id="41-serie对象">4.1 Serie对象</h3>
<pre><code class="language-python">j=pandas.Series({'one':1,'three':3,'five':5,'seven':7})
j['five']#可多值索引
</code></pre>
<pre><code>5
</code></pre>
<pre><code class="language-python">j['nine']=9#增加对象
j
</code></pre>
<pre><code>one      1
three    3
five     5
seven    7
nine     9
dtype: int64
</code></pre>
<h4 id="411-索引管理">4.1.1 索引管理</h4>
<pre><code class="language-python">j.iloc[1]#标签位置索引
</code></pre>
<pre><code>3
</code></pre>
<pre><code class="language-python">j.loc['one':'five']#标签切片
</code></pre>
<pre><code>one      1
three    3
five     5
dtype: int64
</code></pre>
<h2 id="5-分组运算">5 分组运算</h2>
<pre><code class="language-python">k=pandas.Series(numpy.arange(5))
print(numpy.sum(k),numpy.mean(k))
</code></pre>
<pre><code>10 2.0
</code></pre>
<pre><code class="language-python">l=pandas.DataFrame([[10,1],[20,2],[30,3],[40,4]])
l.sum()#分组求和
</code></pre>
<pre><code>0    100
1     10
dtype: int64
</code></pre>
<pre><code class="language-python">l.sum(axis=1)#axis按照指定轴求和
</code></pre>
<pre><code>0    11
1    22
2    33
3    44
dtype: int64
</code></pre>
<pre><code class="language-python">l.describe()#全部信息统计
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>count</td>
      <td>4.000000</td>
      <td>4.000000</td>
    </tr>
    <tr>
      <td>mean</td>
      <td>25.000000</td>
      <td>2.500000</td>
    </tr>
    <tr>
      <td>std</td>
      <td>12.909944</td>
      <td>1.290994</td>
    </tr>
    <tr>
      <td>min</td>
      <td>10.000000</td>
      <td>1.000000</td>
    </tr>
    <tr>
      <td>25%</td>
      <td>17.500000</td>
      <td>1.750000</td>
    </tr>
    <tr>
      <td>50%</td>
      <td>25.000000</td>
      <td>2.500000</td>
    </tr>
    <tr>
      <td>75%</td>
      <td>32.500000</td>
      <td>3.250000</td>
    </tr>
    <tr>
      <td>max</td>
      <td>40.000000</td>
      <td>4.000000</td>
    </tr>
  </tbody>
</table>
</div>
<h3 id="51-高级分组运算">5.1 高级分组运算</h3>
<pre><code class="language-python">m=pandas.DataFrame({'subject':['math','physics','english','math','english'],'score':[90,86,57,95,75]})
m
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>subject</th>
      <th>score</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>math</td>
      <td>90</td>
    </tr>
    <tr>
      <td>1</td>
      <td>physics</td>
      <td>86</td>
    </tr>
    <tr>
      <td>2</td>
      <td>english</td>
      <td>57</td>
    </tr>
    <tr>
      <td>3</td>
      <td>math</td>
      <td>95</td>
    </tr>
    <tr>
      <td>4</td>
      <td>english</td>
      <td>75</td>
    </tr>
  </tbody>
</table>
</div>
<pre><code class="language-python">m.groupby('subject').sum()
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>score</th>
    </tr>
    <tr>
      <th>subject</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>english</td>
      <td>132</td>
    </tr>
    <tr>
      <td>math</td>
      <td>185</td>
    </tr>
    <tr>
      <td>physics</td>
      <td>86</td>
    </tr>
  </tbody>
</table>
</div>
<pre><code class="language-python">m.groupby('subject').mean()
#m.groupby(m['subject']).mean()
</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
</code></pre>
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>score</th>
    </tr>
    <tr>
      <th>subject</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>english</td>
      <td>66.0</td>
    </tr>
    <tr>
      <td>math</td>
      <td>92.5</td>
    </tr>
    <tr>
      <td>physics</td>
      <td>86.0</td>
    </tr>
  </tbody>
</table>
</div>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Numpy基础使用]]></title>
        <id>https://liboran.github.io/post/numpy/</id>
        <link href="https://liboran.github.io/post/numpy/">
        </link>
        <updated>2020-04-16T14:48:29.000Z</updated>
        <summary type="html"><![CDATA[<p>数据处理利器之一</p>
]]></summary>
        <content type="html"><![CDATA[<p>数据处理利器之一</p>
<!-- more -->
<p>封面图片来自于<a href='https://www.pixiv.net/artworks/77171026'>Pixiv</a></p>
<h1 id="numpy的使用">NumPy的使用</h1>
<pre><code class="language-python">import numpy
numpy.__version__
</code></pre>
<pre><code>'1.16.5'
</code></pre>
<h1 id="1-array的创建">1 array的创建</h1>
<pre><code class="language-python">data=numpy.array([1,2,3,4,5])
print(data)
data.dtype#numpy里面的数据类型
</code></pre>
<pre><code>[1 2 3 4 5]





dtype('int32')
</code></pre>
<pre><code class="language-python">new_data=data.astype(numpy.float)#改变array的数据类型
new_data
</code></pre>
<pre><code>array([1., 2., 3., 4., 5.])
</code></pre>
<h1 id="2-array的操作">2 array的操作</h1>
<pre><code class="language-python">a=numpy.array([1,2,3,4,5])
print(a.shape)#array形状（五行零列）
print(a.ndim)#array维度
print(a.size)#array的元素个数
</code></pre>
<pre><code>(5,)
1
5
</code></pre>
<pre><code class="language-python">b=numpy.array([1,2,3,4,5],dtype=float)
display(b)
</code></pre>
<pre><code>array([1., 2., 3., 4., 5.])
</code></pre>
<pre><code class="language-python">c=numpy.array([1,2,3,4,5,6,7,8],ndmin=2)#设定array维度为2
display(c)
</code></pre>
<pre><code>array([[1, 2, 3, 4, 5, 6, 7, 8]])
</code></pre>
<pre><code class="language-python">d=numpy.zeros((2,10))#创建全为0的array，两行十列
display(d)
</code></pre>
<pre><code>array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
</code></pre>
<pre><code class="language-python">e=numpy.eye(5,dtype=int,k=2)#2对角线元素为1，五行，int类型
display(e)
</code></pre>
<pre><code>array([[0, 0, 1, 0, 0],
       [0, 0, 0, 1, 0],
       [0, 0, 0, 0, 1],
       [0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0]])
</code></pre>
<h1 id="3-array的等差数列">3 array的等差数列</h1>
<pre><code class="language-python">f=numpy.arange(1,100,3)#创建1~100公差为3的等差数列
display(f)
</code></pre>
<pre><code>array([ 1,  4,  7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49,
       52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97])
</code></pre>
<pre><code class="language-python">g=numpy.linspace(2.0,3.0,num=5)#创建2.0~3.0之间的等差数列，数列个数为5
display(g)
</code></pre>
<pre><code>array([2.  , 2.25, 2.5 , 2.75, 3.  ])
</code></pre>
<h1 id="4-reshape的使用">4 reshape的使用</h1>
<pre><code class="language-python">h=numpy.array([1,2,3,4,5,6,7,8])
display(h.reshape(2,4))#reshape函数改为维度为2行4列
display(h.reshape(4,2))
display(h.reshape(-1,2))#未知行数使用-1代替
</code></pre>
<pre><code>array([[1, 2, 3, 4],
       [5, 6, 7, 8]])



array([[1, 2],
       [3, 4],
       [5, 6],
       [7, 8]])



array([[1, 2],
       [3, 4],
       [5, 6],
       [7, 8]])
</code></pre>
<pre><code class="language-python">display(h[2:5])#切片
display(h[::-1])
</code></pre>
<pre><code>array([3, 4, 5])



array([8, 7, 6, 5, 4, 3, 2, 1])
</code></pre>
<h1 id="5-array的切片">5 array的切片</h1>
<pre><code class="language-python">i=numpy.arange(0,60,10).reshape(-1,1)
display(i)
i=i+numpy.arange(0,6)
display(i)
display(i[1:4])#此处切片为1~4行
</code></pre>
<pre><code>array([[ 0],
       [10],
       [20],
       [30],
       [40],
       [50]])



array([[ 0,  1,  2,  3,  4,  5],
       [10, 11, 12, 13, 14, 15],
       [20, 21, 22, 23, 24, 25],
       [30, 31, 32, 33, 34, 35],
       [40, 41, 42, 43, 44, 45],
       [50, 51, 52, 53, 54, 55]])



array([[10, 11, 12, 13, 14, 15],
       [20, 21, 22, 23, 24, 25],
       [30, 31, 32, 33, 34, 35]])
</code></pre>
<h1 id="6-array的转换与合并分割">6 array的转换与合并分割</h1>
<pre><code class="language-python">display(i.flatten())#转换为一维数组
</code></pre>
<pre><code>array([ 0,  1,  2,  3,  4,  5, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24,
       25, 30, 31, 32, 33, 34, 35, 40, 41, 42, 43, 44, 45, 50, 51, 52, 53,
       54, 55])
</code></pre>
<pre><code class="language-python">j=numpy.arange(9).reshape(3,3)
k=numpy.arange(12).reshape(3,4)
l=numpy.arange(15).reshape(3,5)
display(numpy.hstack((j,k)))#水平合并
l2=l.T#数组转置
display(numpy.vstack((j,l2)))#垂直合并
#numpy.concatenate((j,l2),axis=0)等效上述
</code></pre>
<pre><code>array([[ 0,  1,  2,  0,  1,  2,  3],
       [ 3,  4,  5,  4,  5,  6,  7],
       [ 6,  7,  8,  8,  9, 10, 11]])



array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 0,  5, 10],
       [ 1,  6, 11],
       [ 2,  7, 12],
       [ 3,  8, 13],
       [ 4,  9, 14]])
</code></pre>
<pre><code class="language-python">m=numpy.arange(24).reshape(4,6)
display(numpy.split(m,2,axis=1))#按照1轴方向将array分为2组
#numpy.hsplit(a,2)0轴分割
#numpy.vsplit(a,2)1轴分割
</code></pre>
<pre><code>[array([[ 0,  1,  2],
        [ 6,  7,  8],
        [12, 13, 14],
        [18, 19, 20]]), array([[ 3,  4,  5],
        [ 9, 10, 11],
        [15, 16, 17],
        [21, 22, 23]])]
</code></pre>
<h1 id="7-array的计算">7 array的计算</h1>
<pre><code class="language-python">n=numpy.array([1,3,5,7])
o=numpy.array([2,4,6,8])
display(n*3)#&quot;+ - * /&quot;同理
</code></pre>
<pre><code>array([ 3,  9, 15, 21])
</code></pre>
<pre><code class="language-python">display(n==o)
display(n.shape==o.shape)
</code></pre>
<pre><code>array([False, False, False, False])



True
</code></pre>
<h1 id="8-array的数据处理">8 array的数据处理</h1>
<pre><code class="language-python">#numpy.mean()平均值
#numpy.std()计算标准差
#numpy.min()/numpy.max()计算最小/最大值
#numpy.percentile()计算百分位在统计对象中的值
#numpy.median()计算统计对象中值
#numpy.sum()计算所有对象的和
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django学习 （五）]]></title>
        <id>https://liboran.github.io/post/django_5/</id>
        <link href="https://liboran.github.io/post/django_5/">
        </link>
        <updated>2020-04-13T11:11:51.000Z</updated>
        <summary type="html"><![CDATA[<p>谈一谈怎么把Django项目部署到服务器（歪门邪道警告）</p>
]]></summary>
        <content type="html"><![CDATA[<p>谈一谈怎么把Django项目部署到服务器（歪门邪道警告）</p>
<!-- more -->
<p>在学习Django的这几天，每当看到Django的项目可以在127.0.0.1:8000跑起来，都会想到如果这个项目运行在云服务器会是怎样，不久成为一个网站了吗？<br>
<img src="https://liboran.github.io/post-images/1586776746593.jpg" alt="" loading="lazy"><br>
说搞就搞。</p>
<p>先使用pscp将这整个项目文件传输到阿里云服务器。并且在服务器搭建Django环境。</p>
<p>依旧使用python manage.py runserver 0:8888将Django项目跑起来。</p>
<p>从浏览器访问服务器的公网地址，端口8888，就能访问这个网站了！！！</p>
<p>但是如果关闭这个进程，或是直接关闭终端，都会使这个Django项目关闭。。。</p>
<p><strong>接下来重点到了！</strong><br>
<img src="https://liboran.github.io/post-images/1586777292969.jpeg" alt="" loading="lazy"><br>
如果想让Django项目在Ubuntu后台运行，需要这样运行：<br>
<mark>nohup</mark> python manage.py runserver 0:8888 <mark>&amp;</mark>。</p>
<p>其中nohup使项目可以在后台运行。“&amp;”可以让项目在SSH连接断开之后依旧连接。</p>
<p>将这个项目停止的方法是：<br>
使用<mark>netstat -ap|grep 8888</mark>来找出占用端口8888的进程，然后使用kill命令终止这个进程。</p>
<p>效果还可以吧。<br>
<img src="https://liboran.github.io/post-images/1586777749545.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django学习 （四）]]></title>
        <id>https://liboran.github.io/post/django_4/</id>
        <link href="https://liboran.github.io/post/django_4/">
        </link>
        <updated>2020-04-13T10:14:44.000Z</updated>
        <summary type="html"><![CDATA[<p>关于图片、js、css无法在Django框架中无法正常显示的问题</p>
]]></summary>
        <content type="html"><![CDATA[<p>关于图片、js、css无法在Django框架中无法正常显示的问题</p>
<!-- more -->
<p>学完了Django的基础中的基础中的基础，可以发现在templates文件夹下是存放html文件的地方。</p>
<p>故此，Django创建的页面样式主要还是依靠html来展示。</p>
<p>但是在Django中创建的html网页与普通的网页有很多不一样，其中比较重要的一点就是文件结构。</p>
<p>我尝试使用一个之前已经下载好的网页模板。这个网页模板有js、css的加载与渲染。但是当我把这个网页文件放入templates文件夹中，启动Django却加载不出图片和动态js。</p>
<h1 id="解决方法">解决方法</h1>
<p>从CSDN最终找到了解决方法。</p>
<p>Django的资源路径和普通的html并不相同。</p>
<p>普通的html问价中，同文件夹的路径可以这样写。<br>
<img src="https://liboran.github.io/post-images/1586774118041.png" alt="" loading="lazy"><br>
<img src="https://liboran.github.io/post-images/1586774129527.png" alt="" loading="lazy"><br>
但是这样的路径在Django里面却不正确。</p>
<p>首先创建一个和templates<mark>同级</mark>的文件夹static。</p>
<p>将图片文件、js文件、css文件放入这个文件夹。并且保证html中路径正确。<br>
<img src="https://liboran.github.io/post-images/1586774414294.png" alt="" loading="lazy"><br>
<img src="https://liboran.github.io/post-images/1586774502104.png" alt="" loading="lazy"></p>
<p><strong>Last but not least！</strong></p>
<p>在setting.py文件中的末尾，添加如下代码：</p>
<p><code>STATIC_URL = '/static/'</code><br>
<code>STATICFILES_DIRS = ( os.path.join(BASE_DIR, 'static').replace('\\', '/'), )</code></p>
<p>这样就可以正常加载出图片、js、css啦！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django学习（三）]]></title>
        <id>https://liboran.github.io/post/django_3/</id>
        <link href="https://liboran.github.io/post/django_3/">
        </link>
        <updated>2020-04-11T11:38:41.000Z</updated>
        <summary type="html"><![CDATA[<p>Django的前后端连接</p>
]]></summary>
        <content type="html"><![CDATA[<p>Django的前后端连接</p>
<!-- more -->
<p>已经可以打开页面之后，接下来就要开始考虑网站前端后端的连接问题了。</p>
<p>连接之后，前端提交数据之后，穿给后端，后端使用python进行数据的处理计算。<br>
<img src="https://liboran.github.io/post-images/1586605935242.jpeg" alt="" loading="lazy"></p>
<h1 id="1创建计算页面">1.创建计算页面</h1>
<p>先创建一个计算页面，即在templates文件夹中创建一个cal.html文件。文件如下：<br>
<img src="https://liboran.github.io/post-images/1586606057365.png" alt="" loading="lazy"><br>
将第一个输入的值命名为valueA，另一个为valueB。</p>
<p>其中<mark>form method=&quot;POST&quot; action=&quot;/cal&quot;</mark>这一句很重要！！！<br>
method为请求方法，这里需要提交数据，故此设为<strong>POST</strong>。<br>
action是处理的页面，也就是https://127.0.0.1:8000<mark>/cal</mark>。</p>
<p>Django本身有防止非法跨域请求的功能，所以要加上:<mark>{% csrf_token %}</mark>。<br>
这样就可以避免非法跨域请求的问题了。至于为什么，等我学学前端再回来写上吧。。。</p>
<p>同样的，需要在views.py文件里面加上返回，在urls.py文件里面设置url。<br>
<img src="https://liboran.github.io/post-images/1586607067316.png" alt="" loading="lazy"><br>
<img src="https://liboran.github.io/post-images/1586607221332.png" alt="" loading="lazy"></p>
<h1 id="2创建后端计算">2.创建后端计算</h1>
<p>前端输入的数字，需要后端来接收、处理。故此在<strong>views.py</strong>文件中加上。<br>
<img src="https://liboran.github.io/post-images/1586607626229.png" alt="" loading="lazy"><br>
返回给前端的数据需要使用<strong>字典</strong>类型。</p>
<p>上面图片中红框部分为将输入数据以及计算结果放入数据库。需要在models.py文件中添加方法。<br>
<img src="https://liboran.github.io/post-images/1586607812205.png" alt="" loading="lazy"><br>
并且要在views.py文件中导入。<br>
<img src="https://liboran.github.io/post-images/1586607922585.png" alt="" loading="lazy"></p>
<h1 id="3创建结果页面">3.创建结果页面</h1>
<p>计算的结果要呈现到网页中，故此在templates文件夹中创建一个<strong>result.html</strong>文件。<br>
<img src="https://liboran.github.io/post-images/1586607438769.png" alt="" loading="lazy"><br>
这里的data是后端传过来的数据。即在views.py里面返回的data键值对。</p>
<h1 id="成果">成果</h1>
<p>看一下接下来的成果吧，刚才写上面过程那段已经越写越懵了。。。<br>
<img src="https://liboran.github.io/post-images/1586608211651.png" alt="" loading="lazy"><br>
<img src="https://liboran.github.io/post-images/1586608217763.png" alt="" loading="lazy"><br>
第一次搞这种东西，刚开始的时候懂了，结果写这篇文章的时候依旧懵逼。。。还得熟悉一下。。。</p>
<h1 id="踩坑">踩坑</h1>
<p>1.我的社区版的pycharm刚打开的时候，并没有database，需要安装插件。</p>
<p>安装过程：https://blog.csdn.net/qq_44507335/article/details/88356376</p>
<p>2.数据库的使用。。。大三才开始学。。。先说一点应付一下吧。<br>
<img src="https://liboran.github.io/post-images/1586608810844.png" alt="" loading="lazy"><br>
<img src="https://liboran.github.io/post-images/1586609429714.png" alt="" loading="lazy"><br>
3.这里数据库可能会出现“database is locked”的错误。这是因为数据库只能有一个写者。（前几天操作系统刚刚将“读者-写者问题”，今天就出bug了。。。）</p>
<p>也没看到很好的解决方法，重启pycharm就能够解决了。。。（重启大法好！）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django学习（二）]]></title>
        <id>https://liboran.github.io/post/django_2/</id>
        <link href="https://liboran.github.io/post/django_2/">
        </link>
        <updated>2020-04-11T01:39:07.000Z</updated>
        <summary type="html"><![CDATA[<p>开始创建第一个页面！</p>
]]></summary>
        <content type="html"><![CDATA[<p>开始创建第一个页面！</p>
<!-- more -->
<h1 id="1创建一个html文件">1.创建一个HTML文件</h1>
<p>自己创建的templates文件夹使用来存放HTML文件的。</p>
<p>在这个文件夹里面创建一个HTML文件，取名为<strong>index.html</strong>。<br>
<img src="https://liboran.github.io/post-images/1586569953439.png" alt="" loading="lazy"></p>
<h1 id="2添加映射关系">2.添加映射关系</h1>
<p>在views.py文件中添加映射关系。<br>
<img src="https://liboran.github.io/post-images/1586570294199.png" alt="" loading="lazy"></p>
<h1 id="3设置网页的url">3.设置网页的url</h1>
<p>找到urls.py文件，网页的url关系都是在这里设置的。<br>
<img src="https://liboran.github.io/post-images/1586570690412.png" alt="" loading="lazy"><br>
其中“index/”是自己设置的url路径。</p>
<p>在浏览器就可以从“127.0.0.1:8000/index”对这一页面进行访问。<br>
<img src="https://liboran.github.io/post-images/1586570855085.png" alt="" loading="lazy"><br>
此处的url如果设为空，则登陆“127.0.0.1:8000”看到的页面就是此页面。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django学习 (一)]]></title>
        <id>https://liboran.github.io/post/django_1/</id>
        <link href="https://liboran.github.io/post/django_1/">
        </link>
        <updated>2020-04-10T14:51:48.000Z</updated>
        <summary type="html"><![CDATA[<p>开始学习Django框架啦！<br>
先学习一下Django的项目创建吧！</p>
]]></summary>
        <content type="html"><![CDATA[<p>开始学习Django框架啦！<br>
先学习一下Django的项目创建吧！</p>
<!-- more -->
<h1 id="前言">前言</h1>
<p>Django是现在python的一个著名框架。Python下有许多款不同的 Web 框架，而Django是其中功能最强大的框架之一。</p>
<p>很多网站都会选择python加Django的方式创建，效果也都还不错。</p>
<h1 id="教程部分">教程部分</h1>
<h2 id="1安装django框架">1.安装Django框架</h2>
<p>据说这里会有坑。。。Django的版本不一样，似乎区别很大。。。</p>
<p>这里使用的是python3.6.5，我安装了版本为2.0的Django框架。。。暂时没出啥问题。。。</p>
<p>安装过程就比较简单了<mark>pip install django==2.0</mark>就好啦。</p>
<p>我是在pycharm里面的虚拟环境里面安装的。<br>
<img src="https://liboran.github.io/post-images/1586531212092.png" alt="" loading="lazy"><br>
如果在python命令行里面import没有问题就装好了。</p>
<h2 id="2创建django项目">2.创建Django项目</h2>
<p>（1）先创建一个名为“<strong>mainproject</strong>”的文件夹作为Django的项目文件夹。</p>
<p>（2）进入到“mainproject”文件夹里面，输入<mark>django-admin startproject mainproject</mark>。<br>
<img src="https://liboran.github.io/post-images/1586531658355.png" alt="" loading="lazy"><br>
这时会在mainproject文件夹里面出现名为<strong>mainproject</strong>的文件夹（此文件夹不是项目总文件夹！）和一个<strong>manage.py</strong>的python文件。</p>
<p>（3）依旧在此文件夹内，输入<mark>python manage.py startapp firstWEB</mark>，会生成一些Django框架文件，文件夹名称为<strong>firstWEB</strong>。<br>
<img src="https://liboran.github.io/post-images/1586532144944.png" alt="" loading="lazy"><br>
（4）在firstWEB文件夹内创建文件夹，取名为<strong>template</strong>。</p>
<p>现在的项目创建已经完成了！！！</p>
<p>文件夹目录是这个样子！！！<br>
<img src="https://liboran.github.io/post-images/1586532399502.png" alt="" loading="lazy"></p>
<h2 id="3基础配置">3.基础配置</h2>
<p>（1）首先查看在<strong>mainproject</strong>文件夹下的<strong>setting.py</strong>文件。</p>
<p>这里是Django的一些配置文件。</p>
<p>需要进行以下修改：<br>
<img src="https://liboran.github.io/post-images/1586532753819.png" alt="" loading="lazy"><br>
<img src="https://liboran.github.io/post-images/1586532874916.png" alt="" loading="lazy"><br>
（2）运行设置。</p>
<p>在pycharm右上角点击manage，然后进入<mark>Edit Configrations...</mark><br>
<img src="https://liboran.github.io/post-images/1586533312440.png" alt="" loading="lazy"><br>
在Edit Configrations里面添加<strong>Parameters</strong>为<mark>runserver 127.0.0.1:8000</mark>。<br>
（3）运行框架<br>
点击右上角的“运行”即可。<br>
<img src="https://liboran.github.io/post-images/1586533544069.png" alt="" loading="lazy"><br>
这时，能看见pycharm下方运行框出现下图结果。<br>
<img src="https://liboran.github.io/post-images/1586533726525.png" alt="" loading="lazy"><br>
点击这行链接，就能自动打开浏览器。</p>
<p>如果浏览器页面是这样的，就创建成功啦！<br>
<img src="https://liboran.github.io/post-images/1586533788116.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用PSCP传输文件]]></title>
        <id>https://liboran.github.io/post/pscp/</id>
        <link href="https://liboran.github.io/post/pscp/">
        </link>
        <updated>2020-04-07T15:42:43.000Z</updated>
        <summary type="html"><![CDATA[<p>说说Windows和Linux之间的文件传输</p>
]]></summary>
        <content type="html"><![CDATA[<p>说说Windows和Linux之间的文件传输</p>
<!-- more -->
<p>本来是想在手机上的Linux系统里面安装FTP，使用FTP传输文件什么的。</p>
<p>但是。。。没成功。。。安装好之后一直无法访问。。。<br>
<img src="https://liboran.github.io/post-images/1586276717640.png" alt="" loading="lazy"><br>
所以FTP这个方法以后找时间再说说。。。</p>
<h1 id="pscp">PSCP</h1>
<p>用过putty的人应该都知道pscp这个东西，基于SSH，可以传输从单个文件到多个文件夹。<br>
<img src="https://liboran.github.io/post-images/1586274669032.png" alt="" loading="lazy"><br>
这个可执行文件并不能直接打开，而是需要使用<strong>命令提示符</strong>才可以。</p>
<h1 id="使用步骤">使用步骤</h1>
<h2 id="windows上传到linux">Windows上传到Linux</h2>
<p>1.切换到pscp.exe文件所在目录下，如果现在在命令提示符中输入“pscp.exe”就能看到pscp被启动了。<br>
会有很多pscp命令会出现。<br>
<img src="https://liboran.github.io/post-images/1586275273791.png" alt="" loading="lazy"><br>
2.传输单个文件时，需要输入这样的命令“<strong>pscp.exe 文件路径/文件名 主机名@ip:文件路径/文件名</strong>”。</p>
<p><mark>IP地址之后一定要记得加“:”！！！</mark></p>
<p>例如：把与pscp同文件夹的“chaoxing.py”文件传输到Linux系统<br>
<img src="https://liboran.github.io/post-images/1586275624436.png" alt="" loading="lazy"><br>
<img src="https://liboran.github.io/post-images/1586275822098.png" alt="" loading="lazy"><br>
当输完命令回车之后，会提示需要输入Linux的用户的密码，输完之后，文件就会开始传输到Linux。<br>
<img src="https://liboran.github.io/post-images/1586275995847.png" alt="" loading="lazy"></p>
<h2 id="windows从linux获取">Windows从Linux获取</h2>
<p>命令与前者相似，就是把传文件和获取文件的双方位置对调。<br>
<img src="https://liboran.github.io/post-images/1586276386295.png" alt="" loading="lazy"></p>
<h2 id="传输文件夹">传输文件夹</h2>
<p>只要在命令中添加“-r”，传输的文件夹就会递归传输，就和Linux命令里面的删除文件夹“rm -r”道理一样。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jupyter Notebook开启远程连接]]></title>
        <id>https://liboran.github.io/post/remote-jupyter/</id>
        <link href="https://liboran.github.io/post/remote-jupyter/">
        </link>
        <updated>2020-04-05T03:11:26.000Z</updated>
        <summary type="html"><![CDATA[<p>在昨天刚刚部署的Linux上面安装Jupyter Notebook，<br>
敲代码更方便！</p>
]]></summary>
        <content type="html"><![CDATA[<p>在昨天刚刚部署的Linux上面安装Jupyter Notebook，<br>
敲代码更方便！</p>
<!-- more -->
<h1 id="前言">前言</h1>
<p>刚刚接触Linux，用Vim这种编辑器实在用不习惯啊。。。<br>
只好安装了一个Jupyter Notebook，开启远程连接，敲代码也挺香😎。</p>
<h1 id="准备工作">准备工作</h1>
<p>使用命令行安装Jupyter Notebook，直接输入“pip3 install jupyter”，之后耐心等待就行了（前提是安装了pip！！！）。</p>
<p>如果安装完之后，输入“jupyter notebook”，可以正常启动，就算是安装成功了。</p>
<h1 id="开始配置远程连接">开始配置远程连接</h1>
<p>1.在终端输入“<strong>jupyter notebook --generate-config --allow-root</strong>”，就能生成Jupyter Notebook的配置文件。这个配置文件在“~/.jupyter/”文件夹内。<br>
<img src="https://liboran.github.io/post-images/1586057330980.png" alt="" loading="lazy"><br>
2.在终端输入“ipython”，打开ipython。</p>
<p>在打开的ipython中输入“<strong>from notebook.auth import passwd</strong>”，之后再输入“<strong>passwd()</strong>”，之后会提示要输入密码，这个密码是远程连接时的登陆密码。<br>
<img src="https://liboran.github.io/post-images/1586057600578.png" alt="" loading="lazy"><br>
将生成的“sha1:……”这串文字复制保存下来，这是密码的hash值。</p>
<p>3.使用cd命令切换到“~/.jupyter/”文件夹内，输入“<strong>vim jupyter_notebook_config.py</strong>”,开始配置远程连接。<br>
<img src="https://liboran.github.io/post-images/1586057882118.png" alt="" loading="lazy"><br>
对配置文件里面的以下值做出修改：</p>
<p>（1）允许用户root运行：<br>
c.NotebookApp.allow_root =True<br>
<img src="https://liboran.github.io/post-images/1586058402773.png" alt="" loading="lazy"><br>
（2）修改服务监听地址：<br>
c.NotebookApp.ip = '*'<br>
<img src="https://liboran.github.io/post-images/1586058411599.png" alt="" loading="lazy"><br>
（3）是否打开浏览器：<br>
c.NotebookApp.open_browser = False</p>
<p>（4）hash值（将生成的“sha1:……”填入）：<br>
c.NotebookApp.password = 'sha1:……'</p>
<p>（5）服务监听的端口：<br>
c.NotebookApp.port = 8888<br>
<img src="https://liboran.github.io/post-images/1586058548376.png" alt="" loading="lazy"><br>
注意要去掉前面的“#”。</p>
<p>这就行啦！</p>
<h1 id="使用过程">使用过程</h1>
<p>在终端输入“jupyter notebook”，启动Jupyter Notebook。</p>
<p>在浏览器输入“ip地址:端口号”,例如：192.168.0.10:8888。</p>
<p>第一次连接，需要输入密码，就是刚才自己设置的那个。</p>
<p>之后就能打开Jupyter Notebook啦！<br>
<img src="https://liboran.github.io/post-images/1586058826997.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>